// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PlayNextServer;

#nullable disable

namespace SteamParse.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250124193813_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CollectionGame", b =>
                {
                    b.Property<int>("CollectionsId")
                        .HasColumnType("integer");

                    b.Property<int>("GamesId")
                        .HasColumnType("integer");

                    b.HasKey("CollectionsId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("CollectionGame");
                });

            modelBuilder.Entity("FranchiseGame", b =>
                {
                    b.Property<int>("FranchisesId")
                        .HasColumnType("integer");

                    b.Property<int>("GamesId")
                        .HasColumnType("integer");

                    b.HasKey("FranchisesId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("FranchiseGame");
                });

            modelBuilder.Entity("SteamParse.Models.AgeRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Category")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "category");

                    b.Property<Guid?>("Checksum")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "checksum");

                    b.Property<int?>("GameId")
                        .HasColumnType("integer");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "rating");

                    b.Property<string>("RatingCoverUrl")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "rating_cover_url");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("AgeRatings");
                });

            modelBuilder.Entity("SteamParse.Models.Artwork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AlphaChanel")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "alpha_channel");

                    b.Property<bool>("Animated")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "animated");

                    b.Property<Guid?>("Checksum")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "checksum");

                    b.Property<int?>("GameId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "game");

                    b.Property<int?>("Height")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "height");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "image_id");

                    b.Property<int>("Url")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.Property<int?>("Width")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "width");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Artworks");
                });

            modelBuilder.Entity("SteamParse.Models.Collection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("Checksum")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "checksum");

                    b.PrimitiveCollection<int[]>("GamesId")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "games");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "slug");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.HasKey("Id");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("SteamParse.Models.Cover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AlphaChanel")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "alpha_channel");

                    b.Property<bool>("Animated")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "animated");

                    b.Property<Guid?>("Checksum")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "checksum");

                    b.Property<int?>("GameId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "game");

                    b.Property<int?>("Height")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "height");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "image_id");

                    b.Property<int>("Url")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.Property<int?>("Width")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "width");

                    b.HasKey("Id");

                    b.HasIndex("GameId")
                        .IsUnique();

                    b.ToTable("Covers");
                });

            modelBuilder.Entity("SteamParse.Models.Franchise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("Checksum")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "checksum");

                    b.PrimitiveCollection<int[]>("GamesId")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "games");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "slug");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.HasKey("Id");

                    b.ToTable("Franchises");
                });

            modelBuilder.Entity("SteamParse.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<int[]>("AgeRatingsId")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "age_ratings");

                    b.Property<double>("AggregatedRating")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "aggregated_rating");

                    b.Property<int>("AggregatedRatingCount")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "aggregated_rating_count");

                    b.PrimitiveCollection<int[]>("ArtworksId")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "artworks");

                    b.PrimitiveCollection<int[]>("BundlesId")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "bundles");

                    b.Property<int?>("Category")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "category");

                    b.Property<Guid?>("Checksum")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "checksum");

                    b.PrimitiveCollection<int[]>("CollectionsId")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "collections");

                    b.Property<int>("CoverId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "cover");

                    b.PrimitiveCollection<int[]>("DlcsId")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "dlcs");

                    b.PrimitiveCollection<int[]>("ExpandedGamesId")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "expanded_games");

                    b.PrimitiveCollection<int[]>("ExpansionsId")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "expansions");

                    b.Property<DateTime?>("FirstReleaseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "first_release_date");

                    b.PrimitiveCollection<int[]>("ForksId")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "forks");

                    b.PrimitiveCollection<int[]>("FranchisesId")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "franchises");

                    b.PrimitiveCollection<int[]>("GameEnginesId")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "game_engines");

                    b.PrimitiveCollection<int[]>("GameModesId")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "game_modes");

                    b.PrimitiveCollection<int[]>("GenresId")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "genres");

                    b.Property<int>("Hypes")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "hypes");

                    b.PrimitiveCollection<int[]>("InvolvedCompaniesId")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "involved_companies");

                    b.PrimitiveCollection<int[]>("KeywordsId")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "keywords");

                    b.PrimitiveCollection<int[]>("LanguageSupportsId")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "language_supports");

                    b.PrimitiveCollection<int[]>("MultiplayerModesId")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "multiplayer_modes");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int>("ParentGameId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "parent_game");

                    b.PrimitiveCollection<int[]>("PlatformsId")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "platforms");

                    b.PrimitiveCollection<int[]>("PlayerPerspectivesId")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "player_perspectives");

                    b.PrimitiveCollection<int[]>("PortsId")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "ports");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "rating");

                    b.Property<int>("RatingCount")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "rating_count");

                    b.PrimitiveCollection<int[]>("ReleaseDatesId")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "release_dates");

                    b.PrimitiveCollection<int[]>("RemakesId")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "remakes");

                    b.PrimitiveCollection<int[]>("RemastersId")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "remasters");

                    b.PrimitiveCollection<int[]>("ScreenshotsId")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "screenshots");

                    b.PrimitiveCollection<int[]>("SimilarGamesId")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "similar_games");

                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "slug");

                    b.PrimitiveCollection<int[]>("StandaloneExpansionsId")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "standalone_expansions");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.Property<string>("Storyline")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "storyline");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "summary");

                    b.PrimitiveCollection<int[]>("Tags")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "tags");

                    b.PrimitiveCollection<int[]>("ThemesId")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "themes");

                    b.Property<double>("TotalRating")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "total_rating");

                    b.Property<int>("TotalRatingCount")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "total_rating_count");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.Property<int>("VersionParentId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "version_parent");

                    b.Property<string>("VersionTitle")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "version_title");

                    b.PrimitiveCollection<int[]>("VideosId")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "videos");

                    b.PrimitiveCollection<int[]>("WebsitesId")
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "websites");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("SteamParse.Models.GameEngine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("Checksum")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "checksum");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<int?>("GameId")
                        .HasColumnType("integer");

                    b.Property<int?>("LogoId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "logo");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "slug");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("LogoId");

                    b.ToTable("GameEngines");
                });

            modelBuilder.Entity("SteamParse.Models.GameEngineLogo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AlphaChanel")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "alpha_channel");

                    b.Property<bool>("Animated")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "animated");

                    b.Property<Guid?>("Checksum")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "checksum");

                    b.Property<int?>("Height")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "height");

                    b.Property<int?>("ImageId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "image_id");

                    b.Property<int?>("Url")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.Property<int?>("Width")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "width");

                    b.HasKey("Id");

                    b.ToTable("GameEngineLogos");
                });

            modelBuilder.Entity("SteamParse.Models.GameLocalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("Checksum")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "checksum");

                    b.Property<int?>("CoverId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "cover");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<int>("GameId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "game");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "region");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CoverId");

                    b.HasIndex("GameId");

                    b.HasIndex("RegionId");

                    b.ToTable("GameLocalizations");
                });

            modelBuilder.Entity("SteamParse.Models.GameMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("Checksum")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "checksum");

                    b.Property<int?>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "slug");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<int?>("Url")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("GameModes");
                });

            modelBuilder.Entity("SteamParse.Models.GameVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("Checksum")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "checksum");

                    b.Property<int>("GameId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "game");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("VideoId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "video_id");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("GameVideos");
                });

            modelBuilder.Entity("SteamParse.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("Checksum")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "checksum");

                    b.Property<int?>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "slug");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<int?>("Url")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("SteamParse.Models.InvolvedCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("Checksum")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "checksum");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "company");

                    b.Property<int?>("GameId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "game");

                    b.Property<bool>("IsDeveloper")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "developer");

                    b.Property<bool>("IsPorting")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "porting");

                    b.Property<bool>("IsPublisher")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "publisher");

                    b.Property<bool>("IsSupporting")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "supporting");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("InvolvedCompany");
                });

            modelBuilder.Entity("SteamParse.Models.Keyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("Checksum")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "checksum");

                    b.Property<int?>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "slug");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Keywords");
                });

            modelBuilder.Entity("SteamParse.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("Checksum")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "checksum");

                    b.Property<string>("Locale")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "locale");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("NativeName")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "native_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("SteamParse.Models.LanguageSupport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("Checksum")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "checksum");

                    b.Property<int?>("GameId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "game");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "language");

                    b.Property<int?>("LanguageSupportTypeId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "language_support_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LanguageSupportTypeId");

                    b.ToTable("LanguageSupports");
                });

            modelBuilder.Entity("SteamParse.Models.LanguageSupportType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Checksum")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "checksum");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.HasKey("Id");

                    b.ToTable("LanguageSupportTypes");
                });

            modelBuilder.Entity("SteamParse.Models.MultiplayerMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("CampaignCoop")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "campaigncoop");

                    b.Property<Guid?>("Checksum")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "checksum");

                    b.Property<bool?>("DropIn")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "dropin");

                    b.Property<int?>("GameId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "game");

                    b.Property<bool?>("LanCoop")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "lancoop");

                    b.Property<bool?>("OfflineCoop")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "offlinecoop");

                    b.Property<int?>("OfflineCoopMax")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "offlinecoopmax");

                    b.Property<int?>("OfflineMax")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "offlinemax");

                    b.Property<bool?>("OnlineCoop")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "onlinecoop");

                    b.Property<int?>("OnlineCoopMax")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "onlinecoopmax");

                    b.Property<int?>("OnlineMax")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "onlinemax");

                    b.Property<int?>("PlatformId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "platform");

                    b.Property<bool?>("SplitScreen")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "splitscreen");

                    b.Property<bool?>("SplitScreenOnline")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "splitscreenonline");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlatformId");

                    b.ToTable("MultiplayerModes");
                });

            modelBuilder.Entity("SteamParse.Models.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "abbreviation");

                    b.Property<string>("AlternativeName")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "alternative_name");

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "category");

                    b.Property<Guid?>("Checksum")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "checksum");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<int?>("GameId")
                        .HasColumnType("integer");

                    b.Property<int?>("Generation")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "generation");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int?>("PlatformFamilyId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "platform_family");

                    b.Property<int?>("PlatformLogoId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "platform_logo");

                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "slug");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "summary");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlatformFamilyId");

                    b.HasIndex("PlatformLogoId");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("SteamParse.Models.PlatformFamily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("Checksum")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "checksum");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "slug");

                    b.HasKey("Id");

                    b.ToTable("PlatformFamilies");
                });

            modelBuilder.Entity("SteamParse.Models.PlatformLogo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AlphaChanel")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "alpha_channel");

                    b.Property<bool>("Animated")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "animated");

                    b.Property<Guid?>("Checksum")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "checksum");

                    b.Property<int?>("Height")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "height");

                    b.Property<string>("ImageId")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "image_id");

                    b.Property<int?>("Url")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.Property<int?>("Width")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "width");

                    b.HasKey("Id");

                    b.ToTable("PlatformLogos");
                });

            modelBuilder.Entity("SteamParse.Models.PlayerPerspective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("Checksum")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "checksum");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<int?>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "slug");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("PlayerPerspectives");
                });

            modelBuilder.Entity("SteamParse.Models.PopularityPrimitive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CalculatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "calculated_at");

                    b.Property<Guid?>("Checksum")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "checksum");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<int?>("GameId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "game_id");

                    b.Property<int?>("PopularitySource")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "popularity_source");

                    b.Property<int>("PopularityType")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "popularity_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasAnnotation("Relational:JsonPropertyName", "value");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("PopularityPrimitives");
                });

            modelBuilder.Entity("SteamParse.Models.PopularityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("Checksum")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "checksum");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int>("PopularitySource")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "popularity_source");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.HasKey("Id");

                    b.ToTable("PopularityTypes");
                });

            modelBuilder.Entity("SteamParse.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "category");

                    b.Property<Guid?>("Checksum")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "checksum");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<string>("Identifier")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "identifier");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("SteamParse.Models.ReleaseDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "category");

                    b.Property<Guid?>("Checksum")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "checksum");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "date");

                    b.Property<int>("GameId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "game");

                    b.Property<string>("Human")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "human");

                    b.Property<int?>("Month")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "m");

                    b.Property<int?>("PlatformId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "platform");

                    b.Property<int>("Region")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "region");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<int?>("Year")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "y");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlatformId");

                    b.HasIndex("StatusId");

                    b.ToTable("ReleaseDates");
                });

            modelBuilder.Entity("SteamParse.Models.ReleaseDateStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("Checksum")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "checksum");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.HasKey("Id");

                    b.ToTable("ReleaseDateStatuses");
                });

            modelBuilder.Entity("SteamParse.Models.Screenshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AlphaChannel")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "alpha_channel");

                    b.Property<bool?>("Animated")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "animated");

                    b.Property<Guid?>("Checksum")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "checksum");

                    b.Property<int?>("GameId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "game");

                    b.Property<int?>("Height")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "height");

                    b.Property<string>("ImageId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "image_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.Property<int?>("Width")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "width");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Screenshots");
                });

            modelBuilder.Entity("SteamParse.Models.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("Checksum")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "checksum");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<int?>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "slug");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("SteamParse.Models.Website", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Category")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "category");

                    b.Property<Guid?>("Checksum")
                        .HasColumnType("uuid")
                        .HasAnnotation("Relational:JsonPropertyName", "checksum");

                    b.Property<int?>("GameId")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "game");

                    b.Property<bool?>("Trusted")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "trusted");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Websites");
                });

            modelBuilder.Entity("CollectionGame", b =>
                {
                    b.HasOne("SteamParse.Models.Collection", null)
                        .WithMany()
                        .HasForeignKey("CollectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamParse.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FranchiseGame", b =>
                {
                    b.HasOne("SteamParse.Models.Franchise", null)
                        .WithMany()
                        .HasForeignKey("FranchisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamParse.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SteamParse.Models.AgeRating", b =>
                {
                    b.HasOne("SteamParse.Models.Game", null)
                        .WithMany("AgeRatings")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("SteamParse.Models.Artwork", b =>
                {
                    b.HasOne("SteamParse.Models.Game", "Game")
                        .WithMany("Artworks")
                        .HasForeignKey("GameId");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("SteamParse.Models.Cover", b =>
                {
                    b.HasOne("SteamParse.Models.Game", "Game")
                        .WithOne("Cover")
                        .HasForeignKey("SteamParse.Models.Cover", "GameId");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("SteamParse.Models.GameEngine", b =>
                {
                    b.HasOne("SteamParse.Models.Game", null)
                        .WithMany("GameEngines")
                        .HasForeignKey("GameId");

                    b.HasOne("SteamParse.Models.GameEngineLogo", "Logo")
                        .WithMany()
                        .HasForeignKey("LogoId");

                    b.Navigation("Logo");
                });

            modelBuilder.Entity("SteamParse.Models.GameLocalization", b =>
                {
                    b.HasOne("SteamParse.Models.Cover", "Cover")
                        .WithMany()
                        .HasForeignKey("CoverId");

                    b.HasOne("SteamParse.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamParse.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cover");

                    b.Navigation("Game");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("SteamParse.Models.GameMode", b =>
                {
                    b.HasOne("SteamParse.Models.Game", null)
                        .WithMany("GameModes")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("SteamParse.Models.GameVideo", b =>
                {
                    b.HasOne("SteamParse.Models.Game", "Game")
                        .WithMany("Videos")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("SteamParse.Models.Genre", b =>
                {
                    b.HasOne("SteamParse.Models.Game", null)
                        .WithMany("Genres")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("SteamParse.Models.InvolvedCompany", b =>
                {
                    b.HasOne("SteamParse.Models.Game", null)
                        .WithMany("InvolvedCompanies")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("SteamParse.Models.Keyword", b =>
                {
                    b.HasOne("SteamParse.Models.Game", null)
                        .WithMany("Keywords")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("SteamParse.Models.LanguageSupport", b =>
                {
                    b.HasOne("SteamParse.Models.Game", "Game")
                        .WithMany("LanguageSupports")
                        .HasForeignKey("GameId");

                    b.HasOne("SteamParse.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("SteamParse.Models.LanguageSupportType", "LanguageSupportType")
                        .WithMany()
                        .HasForeignKey("LanguageSupportTypeId");

                    b.Navigation("Game");

                    b.Navigation("Language");

                    b.Navigation("LanguageSupportType");
                });

            modelBuilder.Entity("SteamParse.Models.MultiplayerMode", b =>
                {
                    b.HasOne("SteamParse.Models.Game", "Game")
                        .WithMany("MultiplayerModes")
                        .HasForeignKey("GameId");

                    b.HasOne("SteamParse.Models.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId");

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("SteamParse.Models.Platform", b =>
                {
                    b.HasOne("SteamParse.Models.Game", null)
                        .WithMany("Platforms")
                        .HasForeignKey("GameId");

                    b.HasOne("SteamParse.Models.PlatformFamily", "PlatformFamily")
                        .WithMany()
                        .HasForeignKey("PlatformFamilyId");

                    b.HasOne("SteamParse.Models.PlatformLogo", "PlatformLogo")
                        .WithMany()
                        .HasForeignKey("PlatformLogoId");

                    b.Navigation("PlatformFamily");

                    b.Navigation("PlatformLogo");
                });

            modelBuilder.Entity("SteamParse.Models.PlayerPerspective", b =>
                {
                    b.HasOne("SteamParse.Models.Game", null)
                        .WithMany("PlayerPerspectives")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("SteamParse.Models.PopularityPrimitive", b =>
                {
                    b.HasOne("SteamParse.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("SteamParse.Models.ReleaseDate", b =>
                {
                    b.HasOne("SteamParse.Models.Game", "Game")
                        .WithMany("ReleaseDates")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamParse.Models.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId");

                    b.HasOne("SteamParse.Models.ReleaseDateStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Game");

                    b.Navigation("Platform");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SteamParse.Models.Screenshot", b =>
                {
                    b.HasOne("SteamParse.Models.Game", "Game")
                        .WithMany("Screenshots")
                        .HasForeignKey("GameId");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("SteamParse.Models.Theme", b =>
                {
                    b.HasOne("SteamParse.Models.Game", null)
                        .WithMany("Themes")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("SteamParse.Models.Website", b =>
                {
                    b.HasOne("SteamParse.Models.Game", "Game")
                        .WithMany("Websites")
                        .HasForeignKey("GameId");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("SteamParse.Models.Game", b =>
                {
                    b.Navigation("AgeRatings");

                    b.Navigation("Artworks");

                    b.Navigation("Cover");

                    b.Navigation("GameEngines");

                    b.Navigation("GameModes");

                    b.Navigation("Genres");

                    b.Navigation("InvolvedCompanies");

                    b.Navigation("Keywords");

                    b.Navigation("LanguageSupports");

                    b.Navigation("MultiplayerModes");

                    b.Navigation("Platforms");

                    b.Navigation("PlayerPerspectives");

                    b.Navigation("ReleaseDates");

                    b.Navigation("Screenshots");

                    b.Navigation("Themes");

                    b.Navigation("Videos");

                    b.Navigation("Websites");
                });
#pragma warning restore 612, 618
        }
    }
}
