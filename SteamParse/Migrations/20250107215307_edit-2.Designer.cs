// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SteamParse;

#nullable disable

namespace SteamParse.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250107215307_edit-2")]
    partial class edit2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Game", b =>
                {
                    b.Property<int>("SteamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "steam_appid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SteamId"));

                    b.Property<string>("ControllerSupport")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "controller_support");

                    b.PrimitiveCollection<string[]>("Developers")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasAnnotation("Relational:JsonPropertyName", "developers");

                    b.PrimitiveCollection<int[]>("Dlcs")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasAnnotation("Relational:JsonPropertyName", "dlc");

                    b.Property<string>("HeaderImage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "header_image");

                    b.Property<bool>("IsFree")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "is_free");

                    b.Property<int>("MetacriticId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int>("PlatformsId")
                        .HasColumnType("integer");

                    b.Property<int>("PriceOverviewId")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<string[]>("Publishers")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasAnnotation("Relational:JsonPropertyName", "publishers");

                    b.Property<int>("ReleaseDateId")
                        .HasColumnType("integer");

                    b.Property<int>("RequiredAge")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "required_age");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "short_description");

                    b.Property<string>("SupportedLanguages")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "supported_languages");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "website");

                    b.HasKey("SteamId");

                    b.HasIndex("MetacriticId");

                    b.HasIndex("PlatformsId");

                    b.HasIndex("PriceOverviewId");

                    b.HasIndex("ReleaseDateId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("SteamParse.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<int?>("GameSteamId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameSteamId");

                    b.ToTable("Categories");

                    b.HasAnnotation("Relational:JsonPropertyName", "categories");
                });

            modelBuilder.Entity("SteamParse.Models.GameInfo", b =>
                {
                    b.Property<int>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "appid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AppId"));

                    b.Property<decimal>("LastModified")
                        .HasColumnType("numeric(20,0)")
                        .HasAnnotation("Relational:JsonPropertyName", "last_modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int>("PriceChangeNumber")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "price_change_number");

                    b.HasKey("AppId");

                    b.ToTable("GamesInfo");
                });

            modelBuilder.Entity("SteamParse.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<int?>("GameSteamId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameSteamId");

                    b.ToTable("Genres");

                    b.HasAnnotation("Relational:JsonPropertyName", "genres");
                });

            modelBuilder.Entity("SteamParse.Models.Metacritic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "score");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.HasKey("Id");

                    b.ToTable("Metacritics");

                    b.HasAnnotation("Relational:JsonPropertyName", "metacritic");
                });

            modelBuilder.Entity("SteamParse.Models.Platforms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Linux")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "linux");

                    b.Property<bool>("Mac")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "mac");

                    b.Property<bool>("Windows")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "windows");

                    b.HasKey("Id");

                    b.ToTable("Platforms");

                    b.HasAnnotation("Relational:JsonPropertyName", "platforms");
                });

            modelBuilder.Entity("SteamParse.Models.PriceOverview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "currency");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "discount_percent");

                    b.Property<int>("Final")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "final");

                    b.Property<int>("Initial")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "initial");

                    b.HasKey("Id");

                    b.ToTable("PriceOverviews");

                    b.HasAnnotation("Relational:JsonPropertyName", "price_overview");
                });

            modelBuilder.Entity("SteamParse.Models.ReleaseDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("ComingSoon")
                        .HasColumnType("boolean")
                        .HasAnnotation("Relational:JsonPropertyName", "coming_soon");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "date");

                    b.HasKey("Id");

                    b.ToTable("ReleaseDates");

                    b.HasAnnotation("Relational:JsonPropertyName", "release_date");
                });

            modelBuilder.Entity("Game", b =>
                {
                    b.HasOne("SteamParse.Models.Metacritic", "Metacritic")
                        .WithMany()
                        .HasForeignKey("MetacriticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamParse.Models.Platforms", "Platforms")
                        .WithMany()
                        .HasForeignKey("PlatformsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamParse.Models.PriceOverview", "PriceOverview")
                        .WithMany()
                        .HasForeignKey("PriceOverviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamParse.Models.ReleaseDate", "ReleaseDate")
                        .WithMany()
                        .HasForeignKey("ReleaseDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Metacritic");

                    b.Navigation("Platforms");

                    b.Navigation("PriceOverview");

                    b.Navigation("ReleaseDate");
                });

            modelBuilder.Entity("SteamParse.Models.Category", b =>
                {
                    b.HasOne("Game", null)
                        .WithMany("Categories")
                        .HasForeignKey("GameSteamId");
                });

            modelBuilder.Entity("SteamParse.Models.Genre", b =>
                {
                    b.HasOne("Game", null)
                        .WithMany("Genres")
                        .HasForeignKey("GameSteamId");
                });

            modelBuilder.Entity("Game", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Genres");
                });
#pragma warning restore 612, 618
        }
    }
}
